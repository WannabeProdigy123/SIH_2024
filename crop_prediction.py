# -*- coding: utf-8 -*-
"""Crop-Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dI4-8Oje55SYRCcs9QaSmi4zRnlZbhex
"""

import pandas as pd
import numpy as np
import tensorflow

df = pd.read_csv('/content/Crop_recommendation.csv')
df.head()

df.info()

# Convert the column to a Categorical type
categorical_labels = pd.Categorical(df['label'])

# Display the mapping of categories to codes
label_mapping = dict(enumerate(categorical_labels.categories))

# Show the mapping
print(label_mapping)


df['label'] = pd.Categorical(df['label']).codes
df.head()

X = df.drop(['label'],axis=1).values
y = df['label'].values

print(X.shape, y.shape)

from sklearn.model_selection import train_test_split

X_train, X_raw, y_train, y_raw = train_test_split(X, y, test_size=0.4)
X_test, X_val, y_test, y_val = train_test_split(X_raw, y_raw, test_size=0.2)

print('Train', X_train.shape, y_train.shape)
print('Test', X_test.shape, y_test.shape)
print('Val', X_val.shape, y_val.shape)

from tensorflow import keras

inputs = keras.Input((7,))

x = keras.layers.Reshape((7, 1))(inputs)
x = keras.layers.LSTM(48)(x)
x = keras.layers.Dense(24, activation="gelu")(x)

# Add Dropout layer with a dropout rate of 0.5 (50% of the neurons will be randomly dropped)
x = keras.layers.Dropout(0.5)(x)

outputs = keras.layers.Dense(22, activation="softmax")(x)

model = keras.Model(inputs, outputs)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))

y_pred = keras.ops.argmax(model.predict(X_val), 1)

from sklearn.metrics import accuracy_score, classification_report

accuracy = accuracy_score(y_val, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

print(classification_report(y_val, y_pred))

N_value = 24
P_value = 128
K_value = 196
temperature_value = 22
humidity_value = 90.0
ph_value = 5.0
rainfall_value = 110.0

input_data = np.array([N_value, P_value, K_value, temperature_value, humidity_value, ph_value, rainfall_value]).reshape(1,-1)

prediction = model.predict(input_data)

# Get the index of the class with the highest probability
recommended_crop_class = np.argmax(prediction)

prediction_percentage = prediction[0][recommended_crop_class] * 100

#MApping Crop names to the class gottem
crop_mapping = {0: 'apple', 1: 'banana', 2: 'blackgram', 3: 'chickpea', 4: 'coconut', 5: 'coffee', 6: 'cotton', 7: 'grapes', 8: 'jute', 9: 'kidneybeans', 10: 'lentil', 11: 'maize', 12: 'mango', 13: 'mothbeans', 14: 'mungbean', 15: 'muskmelon', 16: 'orange', 17: 'papaya', 18: 'pigeonpeas', 19: 'pomegranate', 20: 'rice', 21: 'watermelon'}  # Example mapping

recommended_crop = crop_mapping[recommended_crop_class]

print(f"Recommended Crop: {recommended_crop}")
print(f"Prediction Percentage: {prediction_percentage:.2f}%")

model.save('LSTM_Crop_Prediciton.keras')